plugins {
    id "com.jfrog.bintray" version "1.6"
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

init()

group = 'cn.okayj'
version = '1.4.0'
archivesBaseName = 'preorder-tree-adapter'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def siteUrl = 'https://github.com/jack-cook/PreOrderTreeAdapter'
def gitUrl = 'https://github.com/jack-cook/PreOrderTreeAdapter.git'

bintray {
    user = local.getAt("BINTRAY_USER");
    key = local.getAt('BINTRAY_KEY');

    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = 'PreOrderTreeAdapter'
        licenses = ['Apache-2.0']

        websiteUrl = siteUrl
        vcsUrl = gitUrl

        version {
            name = project.version
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Pre-order Tree Adapter'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'okayj'
                        name 'Jack Cook'
                        email '497737103@qq.com'
                    }
                }
            }
        }
    }
}

void init(){
    Properties localProperties = new Properties();
    localProperties.load(new FileInputStream(file('../local.properties')));
    ext {
        local = localProperties;
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile 'cn.okayj:lineartree:0.3.2'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'cn.okayj:axui:0.1.2'
    compile 'cn.okayj:axui-support-recyclerview:0.1.2'
}
